from datetime import date, time
from database.models import Order
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.types import LabeledPrice, PreCheckoutQuery
from environs import Env
import database.requests as rq
import keyboards as kb
import re
from database.models import async_session
from keyboards import filter_bouquets, items, confirm_phone_keyboard
from aiogram import Bot
from database.requests import get_category_item
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderState(StatesGroup):
    choosing_occasion = State()  # –í—ã–±–æ—Ä –ø–æ–≤–æ–¥–∞
    choosing_price = State()     # –í—ã–±–æ—Ä —Å—É–º–º—ã
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_phone = State()
    confrim_for_phone = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)     # –∑–∞–ø–∏—Å—ã–≤–∞—é –∏–ª–∏ –∑–∞–±–∏—Ä–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤ 'FlowerShop'."
        "–ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞, —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö, "
        "—Ä–æ–¥–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–≥. –ù–∞—à –±—É–∫–µ—Ç —Å–æ —Å–º—ã—Å–ª–æ–º —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º –Ω–∞ –≤–∞—à–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    pdf_file = "form.pdf"
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª
        await message.answer_document(FSInputFile(pdf_file))
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await message.answer(
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"

        "‚ö†Ô∏è–ù–∞–∂–∏–º–∞—è '–ü—Ä–∏–Ω—è—Ç—å', —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=kb.form_button
    )


@router.message(F.text == "–ü—Ä–∏–Ω—è—Ç—å")
async def event_form(message: Message, state: FSMContext):
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É. üõ†Ô∏è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await catalog(message, state)


@router.message(F.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
async def not_event_form(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.finish()              # TODO: –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ, –æ—à–∏–±–∫–∞ –≤—ã–ª–µ—Ç–∞–µ—Ç



# –ö–∞—Ç–∞–ª–æ–≥ ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–í —à–∫–æ–ª—É", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: Message, state: FSMContext):
    await state.set_state(OrderState.choosing_occasion)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –±—É–∫–µ—Ç.\n"
        "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π",
        reply_markup=await kb.categories())

    # await flower_price(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞
@router.callback_query(F.data.startswith("category_"), OrderState.choosing_occasion)
async def choose_occasion(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–≤–æ–¥
    occasion = callback.data.split("_")[1]
    await state.update_data(occasion=occasion)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã
    await state.set_state(OrderState.choosing_price)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É
    await callback.message.answer(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=await kb.price()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@router.callback_query(F.data.startswith("price_"), OrderState.choosing_price)
async def choose_price(callback: CallbackQuery, state: FSMContext):
    price = callback.data.split("_")[1]
    await state.update_data(price=price)

    data = await state.get_data()
    occasion = data.get("occasion")
    price = data.get("price")

    filtered_items = await filter_bouquets(occasion, price)

    if filtered_items:
        keyboard = await items(filtered_items)
        await callback.message.answer("–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±—É–∫–µ—Ç—ã:", reply_markup=keyboard)
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—É–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞
# TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
@router.callback_query(F.data.startswith("item_"))
async def category(callback: CallbackQuery):
    item_data = await rq.get_item(callback.data.split("_")[1])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    photo = FSInputFile("image/4.jpg")
    await callback.message.answer_photo(photo=photo)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä {item_data.name}")
    await callback.message.answer(f"*–ë—É–∫–µ—Ç:* {item_data.name}\n"
                                  f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {item_data.description}\n"
                                  f"*–¶–≤–µ—Ç–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤:* {item_data.structure}\n"
                                  f"*–¶–µ–Ω–∞:* {item_data.price}$",
                                  parse_mode="Markdown")
    await callback.message.answer(
        "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?*\n"
        "*–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞*",
        parse_mode="Markdown",
        reply_markup=kb.menu
        )


# TODO: –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç (–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç")
async def order(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(OrderState.waiting_for_name)


@router.message(OrderState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-03-30):")
    await state.set_state(OrderState.waiting_for_date)


@router.message(OrderState.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):")
    await state.set_state(OrderState.waiting_for_time)


@router.message(OrderState.waiting_for_time)
async def process_time(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(time=message.text)
    user_data = await state.get_data()

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        delivery_date = date.fromisoformat(user_data['date'])
        delivery_time = time.fromisoformat(user_data['time'])
    except (ValueError, KeyError):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "–î–∞—Ç–∞: –ì–ì–ì–ì-–ú–ú-–î–î\n"
            "–í—Ä–µ–º—è: –ß–ß:–ú–ú"
        )
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    new_order = Order(
        name=user_data['name'],
        address=user_data['address'],
        data=delivery_date,
        delivery_time=delivery_time
    )

    await message.answer(
        f"–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑:\n"
        f"‚ñ™ –ò–º—è: {new_order.name}\n"
        f"‚ñ™ –ê–¥—Ä–µ—Å: {new_order.address}\n"
        f"‚ñ™ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
        f"‚ñ™ –í—Ä–µ–º—è: {delivery_time.strftime('%H:%M')}"
    )

    # order_id = rq.get_order()

    try:
        async with async_session() as session:
            session.add(new_order)
            await session.commit()              # –§–∏–∫—Å–∏—Ä—É–µ—Ç (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç) –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.refresh(new_order)    # –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç new_order –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
        await send_invoice(message, bot, new_order)
        # print(f"[payment_success] {payment_success}")
        # if payment_success:
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{new_order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"‚ñ™ –ò–º—è: {new_order.name}\n"
            f"‚ñ™ –ê–¥—Ä–µ—Å: {new_order.address}\n"
            f"‚ñ™ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
            f"‚ñ™ –í—Ä–µ–º—è: {delivery_time.strftime('%H:%M')}"
        )
        # else:
        #     # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        #     await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        await message.answer("üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

    await state.clear()


# 4000 0000 0000 0002 —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞
async def send_invoice(message: Message, bot: Bot, order):
    print(f"[order] {order.id} {order.name} {order.address} {order.data} {order.delivery_time}")
    env = Env()
    env.read_env()
    pay_token = env.str("PAY_TG_TOKEN")

    await bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}",
        description="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
        payload=f"order_{order.id}",
        provider_token=pay_token,
        currency="rub",
        prices=[
            LabeledPrice(label="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞", amount=5000)
        ],
        # photo_url="https://shtrih-m-nsk.ru/upload/medialibrary/4b3/kkt_shtrikh_mini_02f-_9_.jpg",
        photo_size=100,
        photo_width=800,
        photo_height=450,
        need_name=False,
        is_flexible=False,
        # need_shipping_address=True,
        protect_content=True, 
        request_timeout=30,
        start_parameter='time-machine-example',
    )


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    print(f"[pre_checkout_query] {pre_checkout_query}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞


@router.message(F.content_type == "successful_payment")
async def process_successful_payment(message: Message):
    print(f"[message.successful_payment] {message.successful_payment}")
    msg = (f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É {message.successful_payment.total_amount} "
           f"{message.successful_payment.currency}\n"
           "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É")
    await message.answer(msg)


# TODO: –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def consultation(message: Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç")
    await state.set_state(OrderState.waiting_for_phone)


# TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(OrderState.waiting_for_phone)
async def consultation(message: Message, state: FSMContext):
    phone = message.text.strip()


    if not re.match(r"^\+7\d{10}$|^8\d{10}$", phone):
        await message.answer("–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79199209292")
        return

    await state.update_data(phone=phone)

    await message.answer(
        f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–µ - {phone}\n'
        f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ!',
        reply_markup = confirm_phone_keyboard()
        )

    await state.set_state(OrderState.confrim_for_phone)


# TODO: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
@router.callback_query(F.data == 'confirm_phone', OrderState.confrim_for_phone)
async def confirm_phone(callback: CallbackQuery, state: FSMContext):
    confirm_data = await state.get_data()
    phone = confirm_data.get('phone')

    await callback.message.answer(
        f'–í–∞—à –Ω–æ–º–µ—Ä - {phone} \n'
        f'–ù–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!'
    )

# TODO: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ò–∑–º–µ–Ω–∏—Ç—å
@router.callback_query(F.data == 'edit_phone', OrderState.confrim_for_phone)
async def edit_phone(callback: CallbackQuery, state: FSMContext):
    await state.update_data(phone=None)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!')
    await state.set_state(OrderState.waiting_for_phone)
    await callback.answer()

# TODO: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é")
async def collection(message: Message, state: FSMContext):
    data = await state.get_data()
    occasion = data.get("occasion")

    all_items = await get_category_item(occasion)

    if all_items:
        keyboard = await items(all_items)
        await message.answer("–í—Å–µ –±—É–∫–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é:", reply_markup=keyboard)
    else:
        await message.answer("–ë—É–∫–µ—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é –Ω–µ—Ç.")
